@startuml binding

enum BoundNodeKind
struct Type{
    + kind : op_kind
    + size_bytes() : size_t
    + operator<<()
    + deduce_type<>() : Type
    + {static} from_string(std::string) : std::optional<Type>
}


abstract BoundNode {
    {abstract} + bound_node_kind() : BoundNodeKind 
    + is_statement() : bool 
    + is_expression() : bool 
}

struct BoundExpression{
    type : Type
}

struct BoundStatement

struct BoundExpressionStatement{
    expression : BoundExpression

    + bound_node_kind() : BoundNodeKind 
}

struct BoundBlockStatement{
    statements : List<BoundStatement>
    + bound_node_kind() : BoundNodeKind
}

struct BoundLiteralExpression {
    value : std::any

    + bound_node_kind() : BoundNodeKind
}

struct BoundBinaryExpression{
    left : BoundExpression
    right : BoundExpression
    op_kind : OperatorKind

    + bound_node_kind() : BoundNodeKind
    + deduce_type() : Type

}

struct BoundCastExpression{
    expression : BoundExpression

    + bound_node_kind() : BoundNodeKind
}

BoundNode <|-- BoundStatement
BoundStatement <|-- BoundExpressionStatement
BoundStatement <|-- BoundBlockStatement


BoundNode <|-- BoundExpression
BoundExpression <|-- BoundLiteralExpression
BoundExpression <|-- BoundBinaryExpression
BoundExpression <|-- BoundCastExpression


@enduml